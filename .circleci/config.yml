version: 2.1

# Define custom commands for this config
# See https://circleci.com/docs/reusing-config/#authoring-reusable-commands
commands:
  check-python:
    steps:
      - run:
          command: source ./venv/bin/activate && python3 --version
          name: Check Python version
      - run:
          command: source ./venv/bin/activate && pip3 --version
          name: Check Pip version
  create-env:
    steps:
      - run:
          # Environment variables must be configured in a CircleCI project or context
          command: |
            cat \<<- EOF > .env
            OPENAI_API_KEY=$OPENAI_API_KEY
            LANGCHAIN_TRACING_V2=$LANGCHAIN_TRACING_V2
            LANGCHAIN_API_KEY=$LANGCHAIN_API_KEY
            LANGCHAIN_ENDPOINT=$LANGCHAIN_ENDPOINT
            LANGCHAIN_PROJECT=$LANGCHAIN_PROJECT
            EOF
          name: Create .env file containing secrets
  install-venv:
    steps:
      - run:
          command: source ./tools/install-venv.sh
          name: Enter virtual env and install dependencies


# Define custom jobs for this config
# See: https://circleci.com/docs/jobs-steps/
jobs:
  run-unit-tests:
    machine: # executor type
      # for a full list of Linux VM execution environments, see
      # https://circleci.com/developer/images?imageType=machine
      image: ubuntu-2204:2023.07.2
    steps:
      - checkout      # Check out the code in the project directory
      - install-venv
      - check-python  # Invoke command "check-python" after entering venv
      - run:
          command: source ./venv/bin/activate && pytest -s
          name: Test rag unit tests
  run-nightly-tests:
    machine: # executor type
      # for a full list of Linux VM execution environments, see
      # https://circleci.com/developer/images?imageType=machine
      image: ubuntu-2204:2023.07.2
    steps:
      - checkout      # Check out the code in the project directory
      - install-venv
      - check-python  # Invoke command "check-python" after entering venv
      - run:
          command: source ./venv/bin/activate && pytest -s
          name: Run nightly tests
  deploy:
    # For running on CircleCI's self-hosted runners
    machine: true
    resource_class: bwizard815/sample-project # TODO add self-hosted runner resource class details
    steps:
      - checkout
      - create-env
      - install-venv
      - check-python  # Invoke command "check-python" after entering venv
      - run:
          command: printenv
          name: Print environment
      - run:
          command: ./tools/install-systemd-service
          name: Install systemd service
      - run:
          command: ./tools/copy-env
          name: Deploy application to /var directory on localhost and start server

# Invoke jobs via workflows
# See: https://circleci.com/docs/workflows/
workflows:
  # This workflow does a full build from scratch and deploys the model
  integration-tests:
    jobs:
      - run-unit-tests:
          context: rag  # contains environment variables
          filters:
            branches:
              only:
                - rag-pipeline # Only run the job when this branch is updated
  deployment-tests:
    # Trigger on a schedule or when retrain branch is updated
#    triggers:
#      - schedule:
#          cron: "0 0 * * *" # Daily
#          filters:
#            branches:
#              only:
#                - main
    jobs:
#      - run-nightly-tests:
#          context: rag  # contains environment variables
#      - hold: # A job that will require manual approval in the CircleCI web application.
#          requires: 
#            - run-nightly-tests
#          type: approval # This key-value pair will set your workflow to a status of "On Hold"
      - deploy:
          context: rag  # contains environment variables
          # TODO: this below should go
          filters:
            branches:
              only:
                - main
#          requires:
#            - hold

